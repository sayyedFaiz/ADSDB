# -*- coding: utf-8 -*-
"""ExploitationZone.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CZI74VWTO7lbyRbhv3VY9qyzE1eVedxx
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import pandas as pd
import duckdb
import sys
import unidecode

con = duckdb.connect(database='/content/drive/MyDrive/ADSDB/TrustedZone/trusted_database.db')
result = con.execute('SHOW TABLES')
tables = result.fetchall()

table_words = []
for table in tables:
    table_words.append(table[0].split('_')[0])
tbl_words = list(set(table_words))
print(tbl_words)

table_name = 'income'

query = f'SELECT * FROM {table_name};'
df_income = pd.read_sql_query(query, con)
print(df_income.head())

table_name = 'rents'

query = f'SELECT * FROM {table_name};'
df_rents = pd.read_sql_query(query, con)
print(df_rents.head())
con.close()

df_income['Nom_Districte'].value_counts()

df_rents['District'].value_counts()

barrios_income = df_income['Nom_Barri'].value_counts()

barrios_income.head(5)

barrios_rents = df_rents['Neighbourhood'].value_counts()

barrios_rents

barrios_income[barrios_income.isin(barrios_rents)]

import unidecode

df_income['Nom_Barri'] = df_income['Nom_Barri'].apply(lambda x: x.strip())
df_income['Nom_Barri'] = df_income['Nom_Barri'].apply(lambda x: x.lower())
df_income['Nom_Barri'] = df_income['Nom_Barri'].apply(lambda x: unidecode.unidecode(x))

df_income['Nom_Barri'].value_counts()

df_rents['Neighbourhood'].value_counts()

df_rents['Neighbourhood'] = df_rents['Neighbourhood'].apply(lambda x: x.strip())
df_rents['Neighbourhood'] = df_rents['Neighbourhood'].apply(lambda x: x.lower())
df_rents['Neighbourhood'] = df_rents['Neighbourhood'].apply(lambda x: unidecode.unidecode(x))

df_rents['Neighbourhood'].value_counts()

common_barrios = list(set(df_income['Nom_Barri']) & set(df_rents['Neighbourhood']))

len(common_barrios)

df_income['Nom_Barri'][~df_income['Nom_Barri'].isin(common_barrios)].value_counts()

df_rents['Neighbourhood'][~df_rents['Neighbourhood'].isin(common_barrios)].value_counts()

df_rents['Neighbourhood'] = df_rents['Neighbourhood'].str.replace('la sagrada familia', 'sagrada familia')
df_rents['Neighbourhood'] = df_rents['Neighbourhood'].str.replace('gothic quarter', 'el gotic')
df_rents['Neighbourhood'] = df_rents['Neighbourhood'].str.replace('fort pienc', 'el fort pienc')

df_income['Nom_Barri'] = df_income['Nom_Barri'].str.replace('el barri gotic', 'el gotic')
df_income['Nom_Barri'] = df_income['Nom_Barri'].str.replace('la sagrada familia', 'sagrada familia')

common_barrios = list(set(df_income['Nom_Barri']) & set(df_rents['Neighbourhood']))

len(common_barrios)

df_income['Nom_Districte'] = df_income['Nom_Districte'].apply(lambda x: x.strip())
df_income['Nom_Districte'] = df_income['Nom_Districte'].apply(lambda x: x.lower())
df_income['Nom_Districte'] = df_income['Nom_Districte'].apply(lambda x: unidecode.unidecode(x))
df_income['Nom_Districte'] = df_income['Nom_Districte'].str.replace("l'eixample", 'eixample')
df_income['Nom_Districte'].value_counts()

df_rents['District'] = df_rents['District'].apply(lambda x: x.strip())
df_rents['District'] = df_rents['District'].apply(lambda x: x.lower())
df_rents['District'] = df_rents['District'].apply(lambda x: unidecode.unidecode(x))
# df_rents['District'] = df_rents['District'].str.replace('eixample', "l'eixample")
df_rents['District'].value_counts()

common_districts = list(set(df_rents['District']) & set(df_income['Nom_Districte']))
len(common_districts)

df_rents['District'][~df_rents['District'].isin(common_districts)].value_counts()

df_income['Nom_Districte'][~df_income['Nom_Districte'].isin(common_districts)].value_counts()

rents_neigh = df_rents.drop_duplicates(
  subset = ['District', 'Neighbourhood'],
  keep = 'last').reset_index(drop = True)
print(len(rents_neigh))
rents_neigh = rents_neigh[['District', 'Neighbourhood']]
rents_neigh.head()

income_neigh = df_income.drop_duplicates(
  subset = ['Nom_Districte', 'Nom_Barri'],
  keep = 'last').reset_index(drop = True)
print(len(income_neigh))
income_neigh = income_neigh[['Nom_Districte', 'Nom_Barri']]
income_neigh.rename(columns={'Nom_Districte': 'District', 'Nom_Barri': 'Neighbourhood'}, inplace=True)
income_neigh.head()

df_merge_col = pd.merge(income_neigh , rents_neigh, on=['Neighbourhood', 'District'], how='outer', indicator=True)
df_merge_col.head()

len(df_merge_col)

df_area = df_merge_col[['District', 'Neighbourhood']]
df_area.head()

path = 'exploitationDB.db'
con = duckdb.connect(database=path)

table_name = 'area'

query = f'CREATE TABLE {table_name} (district VARCHAR, neighbourhood VARCHAR);'
con.execute(query)
con.execute(f"INSERT INTO {table_name} SELECT District, Neighbourhood FROM df_area")

alter_query = f'ALTER TABLE {table_name} ADD id INTEGER;'
con.execute(alter_query)
update_query = f'UPDATE {table_name} SET id = rowid +1;'
con.execute(update_query)

result = con.execute('SHOW TABLES')
tables = result.fetchall()

# Iterate through the tables and select the first and last five rows from each table
for table in tables:
    table_name = table[0]
    print(f"Table: {table_name}")

    # Select the first five rows
    select_first_query = f'SELECT * FROM {table_name} LIMIT 5'
    result = con.execute(select_first_query)
    first_rows = result.fetchall()

    for row in first_rows:
        print(row)

    print("\n")

table_name = 'time'

query = f'CREATE TABLE {table_name} (id INTEGER, year VARCHAR);'
con.execute(query)
query = f'INSERT INTO {table_name} VALUES (1, 2018), (2, 2019), (3, 2020);'
con.execute(query)

table_name = 'area'

query = f"SELECT * FROM {table_name}"

# Execute the SQL query
result = con.execute(query)

# Convert the result to a Pandas DataFrame
table_areas = pd.DataFrame(result.fetchall(), columns=result.description)
print(len(table_areas))
table_areas.head()

table_areas.columns = ['District', 'Neighbourhood', 'ID']
table_areas.head()

table_name = 'time'

query = f"SELECT * FROM {table_name}"

# Execute the SQL query
result = con.execute(query)

# Convert the result to a Pandas DataFrame
table_time = pd.DataFrame(result.fetchall(), columns=result.description)
print(len(table_time))
table_time.head()

table_time.columns = ['ID', 'Year']
table_time.head()

result_df = pd.merge(df_rents, table_areas[['District',	'Neighbourhood','ID']], on=['District',	'Neighbourhood'], how='left')

result_df.rename(columns={'ID': 'AreaID'}, inplace=True)

result_df.head()

result_df = pd.merge(result_df, table_time[['Year','ID']], on=['Year'], how='left')

result_df.rename(columns={'ID': 'YearID'}, inplace=True)

area_table = result_df[['Price', 'AreaID', 'YearID']]
area_table.rename(columns={'Price': 'Avg_Rent'}, inplace=True)
area_table.head()

table_name = 'rent'

query = f'CREATE TABLE {table_name} (avg_rent DECIMAL, AreaID INTEGER, YearID INTEGER);'
con.execute(query)
con.execute(f"INSERT INTO {table_name} SELECT Avg_Rent, AreaID, YearID FROM area_table")

alter_query = f'ALTER TABLE {table_name} ADD id INTEGER;'
con.execute(alter_query)
update_query = f'UPDATE {table_name} SET id = rowid +1;'
con.execute(update_query)

df_income.head()

df_income.rename(columns={'Nom_Districte': 'District', 'Nom_Barri': 'Neighbourhood'}, inplace=True)

result_df = pd.merge(df_income, table_areas[['District',	'Neighbourhood','ID']], on=['District',	'Neighbourhood'], how='left')
result_df.rename(columns={'ID': 'AreaID'}, inplace=True)
result_df.head()

result_df.rename(columns={'Any': 'Year'}, inplace=True)

result_df = pd.merge(result_df, table_time[['Year','ID']], on=['Year'], how='left')
result_df.rename(columns={'ID': 'YearID'}, inplace=True)
result_df.head()

income_table = result_df[['Seccio_Censal', 'Import_Renda_Bruta_', 'AreaID', 'YearID']]
income_table.rename(columns={'Import_Renda_Bruta_': 'Income'}, inplace=True)
income_table.head()

table_name = 'income'

query = f'CREATE TABLE {table_name} (Seccio_Censal INTEGER, Income INTEGER, AreaID INTEGER, YearID INTEGER);'
con.execute(query)
con.execute(f"INSERT INTO {table_name} SELECT Seccio_Censal, Income, AreaID, YearID FROM income_table")

alter_query = f'ALTER TABLE {table_name} ADD id INTEGER;'
con.execute(alter_query)
update_query = f'UPDATE {table_name} SET id = rowid +1;'
con.execute(update_query)

result = con.execute('SHOW TABLES')
tables = result.fetchall()

# Iterate through the tables and select the first and last five rows from each table
for table in tables:
    table_name = table[0]
    print(f"Table: {table_name}")

    # Select the first five rows
    select_first_query = f'SELECT * FROM {table_name} LIMIT 5'
    result = con.execute(select_first_query)
    first_rows = result.fetchall()

    for row in first_rows:
        print(row)

    print("\n")

con.close()

