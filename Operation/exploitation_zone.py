import os
import pandas as pd
import duckdb
import sys
import unidecode

trustedDatabasePath = 'C:/Users/sayye/OneDrive/Desktop/college/PG/UPC/ADSDB/trusted/trusted.db'

connection = duckdb.connect(database=trustedDatabasePath)

result = connection.execute('SHOW TABLES')
tables = [table[0] for table in result.fetchall()]
print(tables)
income , rents = tables[0], tables[1]
query = f'SELECT * FROM {income};'
df_income = pd.read_sql_query(query, connection)
query = f'SELECT * FROM {rents};'
df_rents = pd.read_sql_query(query, connection)

df_income['Nom_Barri'] = df_income['Nom_Barri'].apply(lambda x: x.strip())
df_income['Nom_Barri'] = df_income['Nom_Barri'].apply(lambda x: x.lower())
df_income['Nom_Barri'] = df_income['Nom_Barri'].apply(lambda x: unidecode.unidecode(x))

df_rents['Neighbourhood'] = df_rents['Neighbourhood'].apply(lambda x: x.strip())
df_rents['Neighbourhood'] = df_rents['Neighbourhood'].apply(lambda x: x.lower())
df_rents['Neighbourhood'] = df_rents['Neighbourhood'].apply(lambda x: unidecode.unidecode(x))

df_rents['Neighbourhood'] = df_rents['Neighbourhood'].str.replace('la sagrada familia', 'sagrada familia')
df_rents['Neighbourhood'] = df_rents['Neighbourhood'].str.replace('gothic quarter', 'el gotic')
df_rents['Neighbourhood'] = df_rents['Neighbourhood'].str.replace('fort pienc', 'el fort pienc')

df_income['Nom_Barri'] = df_income['Nom_Barri'].str.replace('el barri gotic', 'el gotic')
df_income['Nom_Barri'] = df_income['Nom_Barri'].str.replace('la sagrada familia', 'sagrada familia')

df_income['Nom_Districte'] = df_income['Nom_Districte'].apply(lambda x: x.strip())
df_income['Nom_Districte'] = df_income['Nom_Districte'].apply(lambda x: x.lower())
df_income['Nom_Districte'] = df_income['Nom_Districte'].apply(lambda x: unidecode.unidecode(x))
df_income['Nom_Districte'] = df_income['Nom_Districte'].str.replace("l'eixample", 'eixample')

df_rents['District'] = df_rents['District'].apply(lambda x: x.strip())
df_rents['District'] = df_rents['District'].apply(lambda x: x.lower())
df_rents['District'] = df_rents['District'].apply(lambda x: unidecode.unidecode(x))

rents_neigh = df_rents.drop_duplicates(
  subset = ['District', 'Neighbourhood'],
  keep = 'last').reset_index(drop = True)
# print(len(rents_neigh))
rents_neigh = rents_neigh[['District', 'Neighbourhood']]
rents_neigh.head()

income_neigh = df_income.drop_duplicates(
  subset = ['Nom_Districte', 'Nom_Barri'],
  keep = 'last').reset_index(drop = True)
# print(len(income_neigh))
income_neigh = income_neigh[['Nom_Districte', 'Nom_Barri']]
income_neigh.rename(columns={'Nom_Districte': 'District', 'Nom_Barri': 'Neighbourhood'}, inplace=True)
income_neigh.head()

df_merge_col = pd.merge(income_neigh , rents_neigh, on=['Neighbourhood', 'District'], how='outer', indicator=True)
df_merge_col.head()

df_area = df_merge_col[['District', 'Neighbourhood']]
df_area.head()


def createAreaTable():
    path = 'C:/Users/sayye/OneDrive/Desktop/college/PG/UPC/ADSDB/exploitation/exploitationDB.db'
    connection = duckdb.connect(database=path)
    table_name = 'area'

    query = f'CREATE TABLE {table_name} (district VARCHAR, neighbourhood VARCHAR);'
    connection.execute(query)
    connection.execute(f"INSERT INTO {table_name} SELECT District, Neighbourhood FROM df_area")
    alter_query = f'ALTER TABLE {table_name} ADD id INTEGER;'
    connection.execute(alter_query)
    update_query = f'UPDATE {table_name} SET id = rowid +1;'
    connection.execute(update_query)
    result = connection.execute('SHOW TABLES')
    tables = [table[0] for table in result.fetchall()]
    # Iterate through the tables and select the first and last five rows from each table
    for table in tables:
        table_name = table
        print(f"Table: {table_name}")
        query = f"SELECT * FROM {table_name}"
        # Execute the SQL query
        result = connection.execute(query)
        # Convert the result to a Pandas DataFrame
        table_areas = pd.DataFrame(result.fetchall(), columns=result.description)
        table_areas.columns = ['District', 'Neighbourhood', 'ID']
        print(table_areas.head())

# createAreaTable()

def createTimeTable():
    table_name = 'time'
    path = 'C:/Users/sayye/OneDrive/Desktop/college/PG/UPC/ADSDB/exploitation/exploitationDB.db'
    connection = duckdb.connect(database=path)
    query = f'CREATE TABLE {table_name} (id INTEGER, year VARCHAR);'
    connection.execute(query)
    query = f'INSERT INTO {table_name} VALUES (1, 2018), (2, 2019), (3, 2020);'
    connection.execute(query)
    query = f"SELECT * FROM {table_name}"
    result = connection.execute(query)
    # Convert the result to a Pandas DataFrame
    table_time = pd.DataFrame(result.fetchall(), columns=result.description)
    table_time.columns = ['ID', 'Year']
    result_df = pd.merge(df_rents, table_areas[['District',	'Neighbourhood','ID']], on=['District',	'Neighbourhood'], how='left')
    result_df.rename(columns={'ID': 'AreaID'}, inplace=True)


    result_df = pd.merge(result_df, table_time[['Year','ID']], on=['Year'], how='left')

    result_df.rename(columns={'ID': 'YearID'}, inplace=True)

    area_table = result_df[['Price', 'AreaID', 'YearID']]
    area_table.rename(columns={'Price': 'Avg_Rent'}, inplace=True)
    area_table.head()